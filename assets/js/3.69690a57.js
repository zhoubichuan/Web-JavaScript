(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{166:function(t,o,_){t.exports=_.p+"assets/img/3.656d330d.png"},225:function(t,o,_){"use strict";_.r(o);var r=[function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"三、原型与原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、原型与原型链"}},[t._v("#")]),t._v(" 三、原型与原型链")]),t._v(" "),r("p",[t._v("每个对象初始化时会生成一个默认的属性，这个属性就是原型，当在这个对象上查找某个属性时，会先在这个对象本身查找这个属性，没有找到就会去原型上查找，原型内部有原型，没有找到依次向内部找属性，这样形成的链状结构我们称为原型链，原型链的顶层是 null")]),t._v(" "),r("p",[r("img",{attrs:{src:_(166),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"_1-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象"}},[t._v("#")]),t._v(" 1.对象")]),t._v(" "),r("p",[t._v("对象 Object 即是对象也是函数，访问函数的原型(prototype) 得到一个对象 Object.prototype,这个对象的原型(__proto__)可以访问到对象的根 null；访问对象的原型(__proto__)可以得到一个对象 Function.prototype，访问这个对象的原型(__proto__)可以得到 Object.prototype")]),t._v(" "),r("p",[t._v("实例化对象（{}）是一个对象,他的原型(__proto__)指向 Object 函数的 prototype，即 Object.prototype")]),t._v(" "),r("h2",{attrs:{id:"_2-函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数"}},[t._v("#")]),t._v(" 2.函数")]),t._v(" "),r("p",[t._v("函数 Function 即是一个对象也是一个函数，访问函数原型(prototype)得到一个对象 Function.prototype，这个对象的原型(__proto__)指向 Object.prototype;Function 对象的原型(__proto__)指向 Function.prototype")]),t._v(" "),r("h2",{attrs:{id:"_3-自定义函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-自定义函数"}},[t._v("#")]),t._v(" 3.自定义函数")]),t._v(" "),r("p",[t._v("函数 Function 即是一个对象也是一个函数，访问函数原型(prototype)得到一个对象 Function.prototype，这个对象的原型(__proto__)指向 Object.prototype;Function 对象的原型(__proto__)指向 Function.prototype")])])}],e=_(0),p=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),r,!1,null,null,null);o.default=p.exports}}]);